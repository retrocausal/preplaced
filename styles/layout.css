/* ========================================================================= */
/* SECTION: Global Layout */
/* This section defines the base styling for the body element, setting up the 
   overall page structure using flexbox for a responsive, full-screen layout. */
/* ========================================================================= */

body {
  /* Sets the display to flex, enabling a flexible box layout for child elements. */
  display: flex;
  /* Specifies a column flow, stacking child elements (header, main, footer) vertically. */
  flex-flow: column;
  /* Aligns flex items to the start of the container, preventing stretching or centering. */
  justify-content: flex-start;
  /* Prevents content overflow by hiding anything that exceeds the viewport dimensions. */
  overflow: hidden;
  /* Sets the width to 100% of the viewport width, ensuring the body spans the full screen. */
  width: 100vw;
  /* Sets the height to 100% of the viewport height for a full-screen layout. */
  height: 100vh;
  position: relative;
  padding: env(safe-area-inset-top, 0) env(safe-area-inset-right, 1rem)
    env(safe-area-inset-bottom, 0) env(safe-area-inset-left, 1rem);
  background-color: var(--color-bg-page);
  /* Sets the text color using a custom CSS variable for theme consistency. */
  color: var(--color-text-base);
  /* Sets the font size to a base value defined by a custom CSS variable. */
  font-size: var(--font-size-base); /* Use the base font size */
  /* Applies a transition effect (defined by a custom variable) for smooth changes to properties like color. */
  transition: var(--transition);
}

/* ========================================================================= */
/* SECTION: Header and Footer */
/* This section styles the header and footer elements, defining their layout 
   and behavior as flex containers for consistent navigation bars. */
/* ========================================================================= */

header,
footer {
  /* Sets a fixed height of 4rem for both header and footer to maintain consistency. */
  height: 4rem;
  /* Ensures the header and footer span the full width of their parent container. */
  width: 100%;
  /* Uses flexbox to arrange child elements (e.g., divs, nav items) in a row. */
  display: flex;
  padding: 0 1rem;
  /* Vertically centers flex items within the container for balanced alignment. */
  align-content: center;
  /* Allows flex items to wrap to a new line if they exceed the container's width. */
  flex-flow: row wrap;
  /* Defines a custom variable for a grid-like column system with 24 columns. */
  --cols: 24;
  /* Sets position to relative, allowing child elements to be positioned relative to the header/footer. */
  position: relative;
}

/* Styles child div elements within header and footer for consistent layout. */
header > div,
footer > div {
  /* Sets the occupancy to 24 columns, meaning the div spans the full width of the 24-column grid. */
  --occupancy: 24;
  /* Calculates the flex basis as a percentage based on the occupancy and total columns (100% in this case). */
  --basis: calc((var(--occupancy) / var(--cols)) * 100%);
  /* Applies the calculated flex basis to ensure the div takes up the full width. */
  flex-basis: var(--basis);
  /* Uses inline-flex to allow the div to act as a flex container while staying inline. */
  display: inline-flex;
  /* Vertically centers child elements within the div. */
  align-items: center;
  /* Sets position to relative for positioning child elements relative to this div. */
  position: relative;
}

/* Styles the hamburger menu icon in the header specifically. */
header #hamburger {
  /* Sets the occupancy to 3 columns, taking up a smaller portion of the 24-column grid. */
  --occupancy: 3;
  /* Sets a larger font size for the hamburger icon using a custom variable. */
  font-size: var(--font-size-xxl);
  /* Positions the hamburger icon relative to its normal position. */
  position: relative;
  /* Slightly shifts the icon downward to adjust its vertical alignment. */
  bottom: calc(var(--font-size-xxl) / 8);
  /* Aligns the hamburger icon to the right side of its flex container. */
  justify-content: flex-end;
}

/* Styles the branding section within the header (e.g., logo or title). */
header .branding {
  /* Allows the branding to grow and shrink as needed, taking available space. */
  flex: 1 1 auto;
  padding-right: 0.5rem;
}

/* ========================================================================= */
/* SECTION: Main Content */
/* This section styles the main content area, making it flexible and scrollable 
   to accommodate the primary content of the page. */
/* ========================================================================= */

main {
  /* Allows the main element to grow and shrink, filling available space in the flex container. */
  flex: 1 1 auto;
  /* Ensures the main content does not exceed the height of its container. */
  max-height: 100%;
  /* Enables scrolling for overflow content while hiding the horizontal overflow. */
  overflow: hidden scroll;
  /* Sets position to relative for positioning child elements relative to main. */
  position: relative;
  padding: 0;
  background-color: var(--color-bg-content);
  display: flex;
  flex-flow: column;
}

/* ========================================================================= */
/* SECTION: Sidebar Navigation (Aside) */
/* This section styles the aside element, which serves as a full-screen sidebar 
   navigation menu, typically hidden by default and revealed with a transition. */
/* ========================================================================= */

aside {
  /* Positions the sidebar fixed to the top-left corner of the viewport. */
  position: fixed;
  top: 0;
  left: 0;
  /* Spans the full viewport width for a full-screen sidebar. */
  width: 100vw;
  /* Spans the full viewport height to cover the entire screen. */
  height: 100vh;
  max-height: 100vh;
  overflow: hidden auto;
  background-color: var(--color-bg-content-alt);
  /* Applies a 0.75-second transition with ease-in-out timing for smooth visibility/opacity changes. */
  transition: all 0.75s ease-in-out;
  /* Hides the sidebar by default, making it invisible. */
  visibility: hidden;
  /* Sets opacity to 0, making the sidebar fully transparent when hidden. */
  opacity: 0;
}

/* Styles the close button for the sidebar navigation. */
aside #close-nav {
  padding: 1rem;
  /* Uses flexbox to arrange the close button content. */
  display: flex;
  /* Ensures the close button spans the full width of the sidebar. */
  width: 100%;
  /* Aligns the close button to the right side of the flex container. */
  justify-content: flex-end;
}

/* Adds a pseudo-element to display an "X" as the close button icon. */
aside #close-nav::after {
  /* Sets the content of the pseudo-element to display the letter "X". */
  content: "X";
  /* Uses a larger font size for the close icon, defined by a custom variable. */
  font-size: var(--font-size-xxl);
  /* Converts the "X" to lowercase for stylistic consistency. */
  text-transform: lowercase;
}

/* Styles the navigation container within the sidebar. */
aside nav {
  /* Ensures the navigation spans the full width of the sidebar. */
  width: 100%;
  /* Uses flexbox with a column layout to stack navigation items vertically. */
  display: flex;
  flex-flow: column;
  padding: 3rem 0.25rem 1rem;
}

/* Styles the menu container within the sidebar navigation. */
aside nav .menu {
  /* Ensures the menu spans the full width of the navigation container. */
  width: 100%;
  padding: 0;
  margin: 0;
}

/* Styles individual menu items and nested items within the sidebar menu. */
aside nav .menu .item,
aside nav .menu .item .list .item {
  /* Ensures each menu item spans the full width of the menu container. */
  width: 100%;
  /* Positions list markers (if any) inside the item for alignment. */
  list-style-position: inside;
  /* Removes default list styling (e.g., bullets) for a clean look. */
  list-style-type: none;
  padding: 1rem;
  margin: 0.5rem 0;
  /* Rounds the corners of menu items with a 0.5rem border radius for a softer look. */
  border-radius: 0.5rem;
  /* Defines a 24-column grid system for the menu items, consistent with header/footer. */
  --cols: 24;
}

/* Removes the top/bottom margin for the first menu item to avoid extra spacing. */
aside nav .menu .item:first-child {
  margin: 0;
}

/* Styles nested unordered lists (ul) and span elements within menu items. */
aside nav .menu .item > ul,
span {
  /* Sets the occupancy to 24 columns, spanning the full width of the grid. */
  --occupancy: 24;
  /* Calculates the flex basis as 100% based on the occupancy and total columns. */
  --basis: calc((var(--occupancy) / var(--cols)) * 100%);
  /* Applies the calculated flex basis to ensure full-width layout. */
  flex-basis: var(--basis);
}

/* Styles nested lists within menu items. */
aside nav .menu .item .list {
  margin: 0;
  padding: 1rem 0.5rem;
  /* Sets the occupancy to 24 columns, ensuring the list spans the full width. */
  --occupancy: 24;
}

/* Styles the header section of a menu item (e.g., for collapsible sections). */
aside nav .menu .item .header {
  /* Uses flexbox to arrange header content in a row, wrapping if necessary. */
  display: flex;
  flex-flow: row wrap;
  /* Vertically centers flex items within the header. */
  align-items: center;
  /* Ensures vertical centering of content within the header. */
  align-content: center;
  /* Sets a minimum height of 3rem to ensure consistent header size. */
  min-height: 3rem;
  padding: 0 1rem;
  /* Adds a 1px solid border using a custom variable for color. */
  border: 1px solid var(--color-border-base);
  background-color: var(--color-bg-interactive);
}

/* Styles the title within a menu item header. */
aside nav .menu .item .header .title {
  /* Sets the occupancy to 18 columns, taking up 75% of the 24-column grid. */
  --occupancy: 18;
}

/* Styles the toggle button/icon within a menu item header. */
aside nav .menu .item .header .toggle {
  /* Sets the occupancy to 6 columns, taking up 25% of the 24-column grid. */
  --occupancy: 6;
}

/* Styles articles within list items in the sidebar navigation. */
aside nav ul li article {
  /* Ensures the article spans the full width of its parent list item. */
  width: 100%;
}

main > article {
  overflow: hidden auto;
  flex-basis: 100%;
  max-height: 100%;
}
